JQUERY NOTES:

set and get text

$('#idname , .classname') -  selects the doms that has this id and dom that has this classname
this dont act like a filter.. it helps to choose mul dom at a same time

to use filters u simply dont give a space

eg: $('.test_call#two').css('color','red');

selects a dom with a specific id and also with the given specific class

$('#idname > .classname') - selects the dom with this this classname thats placed inside this id name

$('#idname').text() - gets the text
$('#idname').text('new text') - sets the text




changing the attribute


$('#idname').attr('href','yahoo.com')

$('a[href]') - refers a tags that has a attr href in it



 $('a[href=vicky]').css("color","red") -  refers the <a> dom that has href as 'vicky'

 the above is a most powerful way of calling dom since it can cover everthing else

$('a[href]').attr('href') - gets the attribute

$('a[href]').attr('href','utube') - sets the attribute

note: when u give 1 arg u get the value,
      when u give 2 arg u set the value,

      when a get text , it gives the 1st matching dom
      but when a set text , it sets to all matching dom


the above can also be written as $('a').attr('href').attr('href','utube')
this is confusing just use this to understand others code


other attribute methods:

removeAttr(name_of_attr) 

eg:
    $('a').removeAttr('href')


addClass(classname) - to all matching dom 
hasClass(classname) - if any one matching dom has then it returns true
removeClass(classname) - removes class of all matching dom and takes no args
toggleClass(classname) - adds or removes class


.clone() - create a copy of element
.clone() - create a copy of element along with the event handlings attached with it


for each in JQUERY

u can interate for a list or also for a list of dom available.

var list = [2,4,4,5,5]

$(list).each(function(index,item){
    console.log(index,element) or console.log(index,this) 
    
})
    
    note:this and element means same when it is iterating doms while it differs when it iterates a list or array


JQUERY filters:

.eq() - is used to select a element at a particular index from a list of matched elements

eg: 
<ul id = 'foreach'>
    <li>number1</li>
    <li >number2</li>
    <li>number3</li>
    <li>number4</li>
</ul>


$('li').eq(2) - choooses the 3rd li element 
//u can do reverse indexing also as in python


.filter()

$('li').filter('.classname') - chooses those that has thid id and this classname

the opposite of this is .not() 

$('li').not('.classname') - chooses those that has this id and not this classname


.has()

any selector that has a specified selector as it sub-ordinate or any further too

eg:

<ul id = 'foreach'>
    <li>number1</li>
    <li id = 'las' class="mid">
        <ul>
            <li class="sub">dfsd</li>
            <li>ssss</li>
        </ul></li>
    <li class="mid">number3</li>
    <li>number4</li>
</ul>

$(li).has(.sub) - will choose the li that has .mid class "ANYWHERE" inside it.

if u wanna rephrase with > the it's tedious

$('li > ul > .mid') to choose the same

note: an object in js is equivalent to dictionary in python.


.is()

the above function is very useful to check if a dom has any other properties within it

this behaves just like has function but it checks condition on its own dom and not in it's children dom.

eg:  
    <button id = "show" class = "test_class">show</button>

    $('#show').is('.test_class')  - returns true
    $('#show').is('.test_class2')  - returns false

similarly:
    $('.test_class').is('#show') - returns true

calling input type is different from other doms

to get status:

$('input:radio[name=ss]:nth(1)').is(':checked')

to set status:
$('input:radio:nth(2)').prop('checked',false);

.attr property didint work so .prop


similarly for checkboxes

gets the status:
$('input:checkbox[name=check3]:nth(0)').is(':checked')

$('input:checkbox[name=check3]:nth(0)').is(':checked')

sets the status:
$('input:checkbox[name=check1]:nth(0)').prop('checked',true);


dropdown

set value:
$('select[id=gender]').val('women')

get value:
$('select[id=gender]').val()

u can set or get their index too


bind and unbind event are deprecated and therefore we are not using it 
instead we use .on(object/dictionary)

where key is the event and value is the function

.one() is same as .on() but executes the block only once

.event() - gives all details abt the event


IMPORTANT NOTE:

when u call a function u add  () to it , but when u refer a function as argument, that is as a call back function u dont use ()

eg:

    $('some dom').on('click',some_func){

    }

    but while calling outside it is 
    some_func();


you can easily send and get value from dom using .data methods

eg: 
    <div id="data"></div>

    $('#data').data({"name":'vignesh',"age":45});

    console.log($('#data').data('age'))

    note this wont work if such dom dont exist.


